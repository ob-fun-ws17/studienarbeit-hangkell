-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Like Hangman but online!
--   
--   An Hangman server to play on the network via a RESTful service.
@package Hangkell
@version 1.0.0


module Word

-- | Placeholder for unsolved chars in solution
placeholder :: Char

-- | Solution of a Hangman game. Unguessd chars are marked with a False.
type SolutionWord = [(Char, Bool)]

-- | Creates a SolutionWord from a given String
--   
--   <pre>
--   &gt;&gt;&gt; createSolutionWord "abc"
--   [('a', False), ('b', False), ('b', False)]
--   </pre>
createSolutionWord :: String -> SolutionWord

-- | Checks if a given char is in the word.
--   
--   <pre>
--   &gt;&gt;&gt; tryChar 'a' "Hangman"
--   True
--   </pre>
tryChar :: Char -> SolutionWord -> Bool

-- | Applys a guess on the solution.
--   
--   <pre>
--   &gt;&gt;&gt; solveChar a [('a', false), ('b', true)]
--   [('a', True), ('b', True)]
--   </pre>
solveChar :: Char -> SolutionWord -> SolutionWord

-- | Checks of the given word matches the solution.
--   
--   <pre>
--   &gt;&gt;&gt; solveWord "ab" [('a', False), ('b', False)]
--   (True, [('a', True), ('b', True)])
--   </pre>
solveWord :: String -> SolutionWord -> (Bool, SolutionWord)

-- | Converts a solution into a String
--   
--   <pre>
--   &gt;&gt;&gt; showSolution [('a', True), ('b', False)]
--   "a_"
--   </pre>
showSolution :: SolutionWord -> String

-- | Checks if there are unknown chars in a solutionWord left.
--   
--   <pre>
--   &gt;&gt;&gt; isPlayable [('a', True)]
--   False
--   </pre>
isPlayable :: SolutionWord -> Bool


module Player

-- | The maximum amount of failures a player is allowed to do before he has
--   to die
maxFaliures :: Int

-- | Data type to bundle Imformation about a player within an game session.
data Player
Player :: Int -> String -> Int -> Bool -> Player

-- | ID of the player
[playerId] :: Player -> Int

-- | The secret key of the player
[secret] :: Player -> String

-- | The amount of failures the player had
[failures] :: Player -> Int

-- | If the player is still alive
[isAlive] :: Player -> Bool

-- | Creates a new Player with the given id. The player is initialized with
--   NO secret and alive
--   
--   newPlayer 4 &gt;&gt;&gt; (4, "", 0, True)
newPlayer :: Int -> Player

-- | returns a list of all players alive
playersAlive :: [Player] -> [Player]

-- | Updates the player after an wrong try. Kills him after last failure
wrongGuess :: Player -> Player

-- | Grants access to a player with given id if the key does match
getPlayerForId :: [Player] -> Int -> String -> Maybe Player

-- | Sets the state of an player to dead
killPlayer :: Player -> Player
instance GHC.Read.Read Player.Player
instance GHC.Show.Show Player.Player
instance GHC.Classes.Eq Player.Player
instance Data.Aeson.Types.ToJSON.ToJSON Player.Player


module Game

-- | The type to store a game sessions state
data Game
Game :: Int -> SolutionWord -> [Player] -> Bool -> Player -> String -> Game

-- | ID of the game
[gameId] :: Game -> Int

-- | SolutionWord the game is about
[solution] :: Game -> SolutionWord

-- | all participating player
[players] :: Game -> [Player]

-- | wether the game is still running
[isRunning] :: Game -> Bool

-- | the player to make the next turn
[atTurn] :: Game -> Player

-- | all chars tried in the past
[guesses] :: Game -> String

-- | Creates a new game session with an completely unsolved given
--   solutionWord
newGame :: Int -> String -> Maybe Game

-- | Updates the given game session and transists it to the next state
makeATurn :: Player -> Char -> Game -> (Game, Bool)

-- | Updates the given game session and transists it to the next state
makeASolve :: Player -> String -> Game -> (Game, Bool)

-- | returns the next alive player that is at turn.
nextPlayerAlive :: Game -> Player
instance GHC.Read.Read Game.Game
instance GHC.Show.Show Game.Game
instance GHC.Classes.Eq Game.Game
instance Data.Aeson.Types.ToJSON.ToJSON Game.Game


module Storage

-- | The storage to keep all game sessions
gameFile :: FilePath

-- | Returns all the stored games.
loadGames :: IO [Game]

-- | Returns a single stored game or Nothing
loadGame :: Int -> IO (Maybe Game)

-- | Overrides the whole storage with the given set of games
saveGames :: [Game] -> IO ()

-- | Overrides the stored game with same ID or appends it to the list
saveGame :: Game -> IO ()

-- | Takes a set of Games and replaces the game with the same ID as the
--   given updated game. Appends it if there is no such game
updateGames :: [Game] -> Game -> [Game]


module Api

-- | Starts the application on Port 8080
startApp :: IO ()

-- | Creates the application serving the api
app :: Application
instance Data.Aeson.Types.ToJSON.ToJSON Api.TurnMessage
instance Data.Aeson.Types.FromJSON.FromJSON Api.TurnMessage
